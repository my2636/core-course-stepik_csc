package generics_collections_streams;

import java.util.stream.IntStream;

public class PseudoRandomStream {
    public static void main(String[] args) {
        int a = 13;

        pseudoRandomStream(a);
    }

    public static IntStream pseudoRandomStream(int seed) {
/*
        IntStream.iterate(seed, x -> (((x * x) / 10)) % 1000 ).forEach(System.out::println);
*/
        return  IntStream.iterate(seed, x -> (((x * x) / 10)) % 1000 );
    }
}

/*
        Напишите метод, возвращающий стрим псевдослучайных целых чисел. Алгоритм генерации чисел следующий:

Берется какое-то начальное неотрицательное число (оно будет передаваться в ваш метод проверяющей системой).
Первый элемент последовательности устанавливается равным этому числу.
Следующие элементы вычисляются по рекуррентной формуле Rn+1=mid(Rn2)Rn+1​=mid(Rn2​), где mid — это функция,
выделяющая второй, третий и четвертый разряд переданного числа. Например, mid(123456)=345mid(123456)=345.

Алгоритм, конечно, дурацкий и не выдерживающий никакой критики, но для практики работы со стримами сойдет :)

Пример

pseudoRandomStream(13) должен вернуть стрим, состоящий из следующих чисел:

        13, 16, 25, 62, 384, 745, 502, 200, 0, ... (дальше бесконечное количество нулей)*/
